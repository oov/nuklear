// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

package winapi

import (
	"math"
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer
var _ = math.Abs

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	moduser32   = windows.NewLazySystemDLL("user32.dll")
	modkernel32 = windows.NewLazySystemDLL("kernel32.dll")
	modgdi32    = windows.NewLazySystemDLL("gdi32.dll")
	modshell32  = windows.NewLazySystemDLL("shell32.dll")
	modgdiplus  = windows.NewLazySystemDLL("gdiplus.dll")

	procGetDC                        = moduser32.NewProc("GetDC")
	procReleaseDC                    = moduser32.NewProc("ReleaseDC")
	procSendMessageW                 = moduser32.NewProc("SendMessageW")
	procPostMessageW                 = moduser32.NewProc("PostMessageW")
	procRegisterClassExW             = moduser32.NewProc("RegisterClassExW")
	procLoadCursorW                  = moduser32.NewProc("LoadCursorW")
	procLoadIconW                    = moduser32.NewProc("LoadIconW")
	procCreateWindowExW              = moduser32.NewProc("CreateWindowExW")
	procAdjustWindowRectEx           = moduser32.NewProc("AdjustWindowRectEx")
	procDefWindowProcW               = moduser32.NewProc("DefWindowProcW")
	procDestroyWindow                = moduser32.NewProc("DestroyWindow")
	procSetCapture                   = moduser32.NewProc("SetCapture")
	procReleaseCapture               = moduser32.NewProc("ReleaseCapture")
	procGetMessageW                  = moduser32.NewProc("GetMessageW")
	procPeekMessageW                 = moduser32.NewProc("PeekMessageW")
	procTranslateMessage             = moduser32.NewProc("TranslateMessage")
	procDispatchMessageW             = moduser32.NewProc("DispatchMessageW")
	procGetClientRect                = moduser32.NewProc("GetClientRect")
	procGetDesktopWindow             = moduser32.NewProc("GetDesktopWindow")
	procShowWindow                   = moduser32.NewProc("ShowWindow")
	procIsWindowVisible              = moduser32.NewProc("IsWindowVisible")
	procFillRect                     = moduser32.NewProc("FillRect")
	procBeginPaint                   = moduser32.NewProc("BeginPaint")
	procEndPaint                     = moduser32.NewProc("EndPaint")
	procGetModuleHandleW             = modkernel32.NewProc("GetModuleHandleW")
	procCreateCompatibleDC           = modgdi32.NewProc("CreateCompatibleDC")
	procDeleteDC                     = modgdi32.NewProc("DeleteDC")
	procCreateDIBSection             = modgdi32.NewProc("CreateDIBSection")
	procGetStockObject               = modgdi32.NewProc("GetStockObject")
	procSelectObject                 = modgdi32.NewProc("SelectObject")
	procDeleteObject                 = modgdi32.NewProc("DeleteObject")
	procGetTextMetricsW              = modgdi32.NewProc("GetTextMetricsW")
	procGetTextExtentPoint32W        = modgdi32.NewProc("GetTextExtentPoint32W")
	procAddFontMemResourceEx         = modgdi32.NewProc("AddFontMemResourceEx")
	procRemoveFontMemResourceEx      = modgdi32.NewProc("RemoveFontMemResourceEx")
	procCreateFontW                  = modgdi32.NewProc("CreateFontW")
	procExtTextOutW                  = modgdi32.NewProc("ExtTextOutW")
	procBitBlt                       = modgdi32.NewProc("BitBlt")
	procSetBkMode                    = modgdi32.NewProc("SetBkMode")
	procSetTextColor                 = modgdi32.NewProc("SetTextColor")
	procCreateRectRgn                = modgdi32.NewProc("CreateRectRgn")
	procSelectClipRgn                = modgdi32.NewProc("SelectClipRgn")
	procDragAcceptFiles              = modshell32.NewProc("DragAcceptFiles")
	procDragQueryFileW               = modshell32.NewProc("DragQueryFileW")
	procDragFinish                   = modshell32.NewProc("DragFinish")
	procGdiplusStartup               = modgdiplus.NewProc("GdiplusStartup")
	procGdiplusShutdown              = modgdiplus.NewProc("GdiplusShutdown")
	procGdipCreateFromHDC            = modgdiplus.NewProc("GdipCreateFromHDC")
	procGdipCreateFromHWND           = modgdiplus.NewProc("GdipCreateFromHWND")
	procGdipDeleteGraphics           = modgdiplus.NewProc("GdipDeleteGraphics")
	procGdipGetDC                    = modgdiplus.NewProc("GdipGetDC")
	procGdipReleaseDC                = modgdiplus.NewProc("GdipReleaseDC")
	procGdipSetSmoothingMode         = modgdiplus.NewProc("GdipSetSmoothingMode")
	procGdipGraphicsClear            = modgdiplus.NewProc("GdipGraphicsClear")
	procGdipSetClipRectI             = modgdiplus.NewProc("GdipSetClipRectI")
	procGdipCreateBitmapFromGraphics = modgdiplus.NewProc("GdipCreateBitmapFromGraphics")
	procGdipCreateBitmapFromScan0    = modgdiplus.NewProc("GdipCreateBitmapFromScan0")
	procGdipDisposeImage             = modgdiplus.NewProc("GdipDisposeImage")
	procGdipGetImageGraphicsContext  = modgdiplus.NewProc("GdipGetImageGraphicsContext")
	procGdipDrawImageI               = modgdiplus.NewProc("GdipDrawImageI")
	procGdipDrawImageRectI           = modgdiplus.NewProc("GdipDrawImageRectI")
	procGdipDrawImageRectRectI       = modgdiplus.NewProc("GdipDrawImageRectRectI")
	procGdipCreateSolidFill          = modgdiplus.NewProc("GdipCreateSolidFill")
	procGdipSetSolidFillColor        = modgdiplus.NewProc("GdipSetSolidFillColor")
	procGdipDeleteBrush              = modgdiplus.NewProc("GdipDeleteBrush")
	procGdipFillRectangleI           = modgdiplus.NewProc("GdipFillRectangleI")
	procGdipFillPieI                 = modgdiplus.NewProc("GdipFillPieI")
	procGdipFillEllipseI             = modgdiplus.NewProc("GdipFillEllipseI")
	procGdipFillPolygonI             = modgdiplus.NewProc("GdipFillPolygonI")
	procGdipCreatePen1               = modgdiplus.NewProc("GdipCreatePen1")
	procGdipDeletePen                = modgdiplus.NewProc("GdipDeletePen")
	procGdipSetPenWidth              = modgdiplus.NewProc("GdipSetPenWidth")
	procGdipSetPenColor              = modgdiplus.NewProc("GdipSetPenColor")
	procGdipDrawLineI                = modgdiplus.NewProc("GdipDrawLineI")
	procGdipDrawRectangleI           = modgdiplus.NewProc("GdipDrawRectangleI")
	procGdipDrawArcI                 = modgdiplus.NewProc("GdipDrawArcI")
	procGdipDrawEllipseI             = modgdiplus.NewProc("GdipDrawEllipseI")
	procGdipDrawPolygonI             = modgdiplus.NewProc("GdipDrawPolygonI")
	procGdipDrawBezierI              = modgdiplus.NewProc("GdipDrawBezierI")
)

func GetDC(hwnd syscall.Handle) (dc syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procGetDC.Addr(), 1, uintptr(hwnd), 0, 0)
	dc = syscall.Handle(r0)
	if dc == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func ReleaseDC(hwnd syscall.Handle, dc syscall.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procReleaseDC.Addr(), 2, uintptr(hwnd), uintptr(dc), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SendMessage(hwnd syscall.Handle, uMsg uint32, wParam uintptr, lParam uintptr) (lResult uintptr) {
	r0, _, _ := syscall.Syscall6(procSendMessageW.Addr(), 4, uintptr(hwnd), uintptr(uMsg), uintptr(wParam), uintptr(lParam), 0, 0)
	lResult = uintptr(r0)
	return
}

func PostMessage(hwnd syscall.Handle, uMsg uint32, wParam uintptr, lParam uintptr) (err error) {
	r1, _, e1 := syscall.Syscall6(procPostMessageW.Addr(), 4, uintptr(hwnd), uintptr(uMsg), uintptr(wParam), uintptr(lParam), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func RegisterClassEx(wc *WNDCLASSEX) (atom uint16, err error) {
	r0, _, e1 := syscall.Syscall(procRegisterClassExW.Addr(), 1, uintptr(unsafe.Pointer(wc)), 0, 0)
	atom = uint16(r0)
	if atom == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func LoadCursor(hInstance syscall.Handle, cursorName uintptr) (cursor syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procLoadCursorW.Addr(), 2, uintptr(hInstance), uintptr(cursorName), 0)
	cursor = syscall.Handle(r0)
	if cursor == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func LoadIcon(hInstance syscall.Handle, iconName uintptr) (icon syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procLoadIconW.Addr(), 2, uintptr(hInstance), uintptr(iconName), 0)
	icon = syscall.Handle(r0)
	if icon == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func CreateWindowEx(exstyle uint32, className *uint16, windowText *uint16, style uint32, x int32, y int32, width int32, height int32, parent syscall.Handle, menu syscall.Handle, hInstance syscall.Handle, lpParam uintptr) (hwnd syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall12(procCreateWindowExW.Addr(), 12, uintptr(exstyle), uintptr(unsafe.Pointer(className)), uintptr(unsafe.Pointer(windowText)), uintptr(style), uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(parent), uintptr(menu), uintptr(hInstance), uintptr(lpParam))
	hwnd = syscall.Handle(r0)
	if hwnd == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func AdjustWindowRectEx(rect *RECT, style uint32, menu int32, exStyle uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procAdjustWindowRectEx.Addr(), 4, uintptr(unsafe.Pointer(rect)), uintptr(style), uintptr(menu), uintptr(exStyle), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func DefWindowProc(hwnd syscall.Handle, uMsg uint32, wParam uintptr, lParam uintptr) (lResult uintptr) {
	r0, _, _ := syscall.Syscall6(procDefWindowProcW.Addr(), 4, uintptr(hwnd), uintptr(uMsg), uintptr(wParam), uintptr(lParam), 0, 0)
	lResult = uintptr(r0)
	return
}

func DestroyWindow(hwnd syscall.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procDestroyWindow.Addr(), 1, uintptr(hwnd), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SetCapture(hwnd syscall.Handle) (prev syscall.Handle) {
	r0, _, _ := syscall.Syscall(procSetCapture.Addr(), 1, uintptr(hwnd), 0, 0)
	prev = syscall.Handle(r0)
	return
}

func ReleaseCapture() (err error) {
	r1, _, e1 := syscall.Syscall(procReleaseCapture.Addr(), 0, 0, 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetMessage(msg *MSG, hwnd syscall.Handle, msgfiltermin uint32, msgfiltermax uint32) (ret int32, err error) {
	r0, _, e1 := syscall.Syscall6(procGetMessageW.Addr(), 4, uintptr(unsafe.Pointer(msg)), uintptr(hwnd), uintptr(msgfiltermin), uintptr(msgfiltermax), 0, 0)
	ret = int32(r0)
	if ret == -1 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func PeekMessage(msg *MSG, hwnd syscall.Handle, msgfiltermin uint32, msgfiltermax uint32, removeflag uint32) (ok bool) {
	r0, _, _ := syscall.Syscall6(procPeekMessageW.Addr(), 5, uintptr(unsafe.Pointer(msg)), uintptr(hwnd), uintptr(msgfiltermin), uintptr(msgfiltermax), uintptr(removeflag), 0)
	ok = r0 != 0
	return
}

func TranslateMessage(msg *MSG) (ret int32) {
	r0, _, _ := syscall.Syscall(procTranslateMessage.Addr(), 1, uintptr(unsafe.Pointer(msg)), 0, 0)
	ret = int32(r0)
	return
}

func DispatchMessage(msg *MSG) (ret int32) {
	r0, _, _ := syscall.Syscall(procDispatchMessageW.Addr(), 1, uintptr(unsafe.Pointer(msg)), 0, 0)
	ret = int32(r0)
	return
}

func GetClientRect(hwnd syscall.Handle, rect *RECT) (err error) {
	r1, _, e1 := syscall.Syscall(procGetClientRect.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(rect)), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetDesktopWindow() (hwnd syscall.Handle) {
	r0, _, _ := syscall.Syscall(procGetDesktopWindow.Addr(), 0, 0, 0, 0)
	hwnd = syscall.Handle(r0)
	return
}

func ShowWindow(hwnd syscall.Handle, cmdshow int32) (wasVisible bool) {
	r0, _, _ := syscall.Syscall(procShowWindow.Addr(), 2, uintptr(hwnd), uintptr(cmdshow), 0)
	wasVisible = r0 != 0
	return
}

func IsWindowVisible(hwnd syscall.Handle) (visible bool) {
	r0, _, _ := syscall.Syscall(procIsWindowVisible.Addr(), 1, uintptr(hwnd), 0, 0)
	visible = r0 != 0
	return
}

func FillRect(hdc syscall.Handle, rect *RECT, br syscall.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procFillRect.Addr(), 3, uintptr(hdc), uintptr(unsafe.Pointer(rect)), uintptr(br))
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func BeginPaint(hwnd syscall.Handle, paint *PAINTSTRUCT) (hdc syscall.Handle) {
	r0, _, _ := syscall.Syscall(procBeginPaint.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(paint)), 0)
	hdc = syscall.Handle(r0)
	return
}

func EndPaint(hwnd syscall.Handle, paint *PAINTSTRUCT) {
	syscall.Syscall(procEndPaint.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(paint)), 0)
	return
}

func GetModuleHandle(moduleName *uint16) (module syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procGetModuleHandleW.Addr(), 1, uintptr(unsafe.Pointer(moduleName)), 0, 0)
	module = syscall.Handle(r0)
	if module == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func CreateCompatibleDC(hdc syscall.Handle) (dc syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procCreateCompatibleDC.Addr(), 1, uintptr(hdc), 0, 0)
	dc = syscall.Handle(r0)
	if dc == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func DeleteDC(hdc syscall.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procDeleteDC.Addr(), 1, uintptr(hdc), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func CreateDIBSection(hdc syscall.Handle, bmi *BITMAPINFO, usage uint, p **byte, section syscall.Handle, offset uint32) (bitmap syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall6(procCreateDIBSection.Addr(), 6, uintptr(hdc), uintptr(unsafe.Pointer(bmi)), uintptr(usage), uintptr(unsafe.Pointer(p)), uintptr(section), uintptr(offset))
	bitmap = syscall.Handle(r0)
	if bitmap == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetStockObject(fnObject int32) (gdiobj syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procGetStockObject.Addr(), 1, uintptr(fnObject), 0, 0)
	gdiobj = syscall.Handle(r0)
	if gdiobj == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SelectObject(hdc syscall.Handle, gdiobj syscall.Handle) (prev syscall.Handle) {
	r0, _, _ := syscall.Syscall(procSelectObject.Addr(), 2, uintptr(hdc), uintptr(gdiobj), 0)
	prev = syscall.Handle(r0)
	return
}

func DeleteObject(gdiobj syscall.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procDeleteObject.Addr(), 1, uintptr(gdiobj), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetTextMetrics(hdc syscall.Handle, tm *TEXTMETRIC) (err error) {
	r1, _, e1 := syscall.Syscall(procGetTextMetricsW.Addr(), 2, uintptr(hdc), uintptr(unsafe.Pointer(tm)), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetTextExtentPoint32(hdc syscall.Handle, str *uint16, strlen int, size *SIZE) (err error) {
	r1, _, e1 := syscall.Syscall6(procGetTextExtentPoint32W.Addr(), 4, uintptr(hdc), uintptr(unsafe.Pointer(str)), uintptr(strlen), uintptr(unsafe.Pointer(size)), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func AddFontMemResourceEx(font *byte, len uint32, pdv *DESIGNVECTOR, fonts *uint32) (handle syscall.Handle) {
	r0, _, _ := syscall.Syscall6(procAddFontMemResourceEx.Addr(), 4, uintptr(unsafe.Pointer(font)), uintptr(len), uintptr(unsafe.Pointer(pdv)), uintptr(unsafe.Pointer(fonts)), 0, 0)
	handle = syscall.Handle(r0)
	return
}

func RemoveFontMemResourceEx(handle syscall.Handle) (ok bool) {
	r0, _, _ := syscall.Syscall(procRemoveFontMemResourceEx.Addr(), 1, uintptr(handle), 0, 0)
	ok = r0 != 0
	return
}

func CreateFont(height int32, width int32, escapement int32, orientation int32, weight int32, italic uint32, underline uint32, strikeOut uint32, charSet uint32, outputPrecision uint32, clipPrecision uint32, quality uint32, pitchAndFamily uint32, face *uint16) (font syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall15(procCreateFontW.Addr(), 14, uintptr(height), uintptr(width), uintptr(escapement), uintptr(orientation), uintptr(weight), uintptr(italic), uintptr(underline), uintptr(strikeOut), uintptr(charSet), uintptr(outputPrecision), uintptr(clipPrecision), uintptr(quality), uintptr(pitchAndFamily), uintptr(unsafe.Pointer(face)), 0)
	font = syscall.Handle(r0)
	if font == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func ExtTextOut(hdc syscall.Handle, x int, y int, options uint32, rect *RECT, str *uint16, strlen int, dx *int) (err error) {
	r1, _, e1 := syscall.Syscall9(procExtTextOutW.Addr(), 8, uintptr(hdc), uintptr(x), uintptr(y), uintptr(options), uintptr(unsafe.Pointer(rect)), uintptr(unsafe.Pointer(str)), uintptr(strlen), uintptr(unsafe.Pointer(dx)), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func BitBlt(hdc syscall.Handle, dx int, dy int, w int, h int, src syscall.Handle, sx int, sy int, rop uint32) (err error) {
	r1, _, e1 := syscall.Syscall9(procBitBlt.Addr(), 9, uintptr(hdc), uintptr(dx), uintptr(dy), uintptr(w), uintptr(h), uintptr(src), uintptr(sx), uintptr(sy), uintptr(rop))
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SetBkMode(hdc syscall.Handle, mode int) (prevMode int, err error) {
	r0, _, e1 := syscall.Syscall(procSetBkMode.Addr(), 2, uintptr(hdc), uintptr(mode), 0)
	prevMode = int(r0)
	if prevMode == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SetTextColor(hdc syscall.Handle, col COLORREF) (prevCol COLORREF, err error) {
	r0, _, e1 := syscall.Syscall(procSetTextColor.Addr(), 2, uintptr(hdc), uintptr(col), 0)
	prevCol = COLORREF(r0)
	if prevCol == CLR_INVALID {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func CreateRectRgn(left int, top int, right int, bottom int) (hrgn syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall6(procCreateRectRgn.Addr(), 4, uintptr(left), uintptr(top), uintptr(right), uintptr(bottom), 0, 0)
	hrgn = syscall.Handle(r0)
	if hrgn == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SelectClipRgn(hdc syscall.Handle, hrgn syscall.Handle) (c int, err error) {
	r0, _, e1 := syscall.Syscall(procSelectClipRgn.Addr(), 2, uintptr(hdc), uintptr(hrgn), 0)
	c = int(r0)
	if c == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func DragAcceptFiles(hwnd syscall.Handle, accept bool) {
	var _p0 uint32
	if accept {
		_p0 = 1
	} else {
		_p0 = 0
	}
	syscall.Syscall(procDragAcceptFiles.Addr(), 2, uintptr(hwnd), uintptr(_p0), 0)
	return
}

func DragQueryFile(drop syscall.Handle, file int, str *uint16, strlen int) (n int) {
	r0, _, _ := syscall.Syscall6(procDragQueryFileW.Addr(), 4, uintptr(drop), uintptr(file), uintptr(unsafe.Pointer(str)), uintptr(strlen), 0, 0)
	n = int(r0)
	return
}

func DragFinish(drop syscall.Handle) {
	syscall.Syscall(procDragFinish.Addr(), 1, uintptr(drop), 0, 0)
	return
}

func GdiplusStartup(token *uintptr, input *GdiplusStartupInput, output *GdiplusStartupOutput) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdiplusStartup.Addr(), 3, uintptr(unsafe.Pointer(token)), uintptr(unsafe.Pointer(input)), uintptr(unsafe.Pointer(output)))
	status = GpStatus(r0)
	return
}

func GdiplusShutdown(token uintptr) {
	syscall.Syscall(procGdiplusShutdown.Addr(), 1, uintptr(token), 0, 0)
	return
}

func GdipCreateFromHDC(hdc syscall.Handle, g *GpGraphics) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipCreateFromHDC.Addr(), 2, uintptr(hdc), uintptr(unsafe.Pointer(g)), 0)
	status = GpStatus(r0)
	return
}

func GdipCreateFromHWND(hwnd syscall.Handle, g *GpGraphics) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipCreateFromHWND.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(g)), 0)
	status = GpStatus(r0)
	return
}

func GdipDeleteGraphics(g GpGraphics) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipDeleteGraphics.Addr(), 1, uintptr(g), 0, 0)
	status = GpStatus(r0)
	return
}

func GdipGetDC(g GpGraphics, hdc *syscall.Handle) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipGetDC.Addr(), 2, uintptr(g), uintptr(unsafe.Pointer(hdc)), 0)
	status = GpStatus(r0)
	return
}

func GdipReleaseDC(g GpGraphics, hdc syscall.Handle) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipReleaseDC.Addr(), 2, uintptr(g), uintptr(hdc), 0)
	status = GpStatus(r0)
	return
}

func GdipSetSmoothingMode(g GpGraphics, mode GpSmoothingMode) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipSetSmoothingMode.Addr(), 2, uintptr(g), uintptr(mode), 0)
	status = GpStatus(r0)
	return
}

func GdipGraphicsClear(g GpGraphics, col GpARGB) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipGraphicsClear.Addr(), 2, uintptr(g), uintptr(col), 0)
	status = GpStatus(r0)
	return
}

func GdipSetClipRectI(g GpGraphics, x int, y int, w int, h int, cm GpCombineMode) (status GpStatus) {
	r0, _, _ := syscall.Syscall6(procGdipSetClipRectI.Addr(), 6, uintptr(g), uintptr(x), uintptr(y), uintptr(w), uintptr(h), uintptr(cm))
	status = GpStatus(r0)
	return
}

func GdipCreateBitmapFromGraphics(width int, height int, g GpGraphics, img *GpImage) (status GpStatus) {
	r0, _, _ := syscall.Syscall6(procGdipCreateBitmapFromGraphics.Addr(), 4, uintptr(width), uintptr(height), uintptr(g), uintptr(unsafe.Pointer(img)), 0, 0)
	status = GpStatus(r0)
	return
}

func GdipCreateBitmapFromScan0(width int, height int, stride int, format GpPixelFormat, scan0 uintptr, img *GpImage) (status GpStatus) {
	r0, _, _ := syscall.Syscall6(procGdipCreateBitmapFromScan0.Addr(), 6, uintptr(width), uintptr(height), uintptr(stride), uintptr(format), uintptr(scan0), uintptr(unsafe.Pointer(img)))
	status = GpStatus(r0)
	return
}

func GdipDisposeImage(img GpImage) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipDisposeImage.Addr(), 1, uintptr(img), 0, 0)
	status = GpStatus(r0)
	return
}

func GdipGetImageGraphicsContext(img GpImage, g *GpGraphics) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipGetImageGraphicsContext.Addr(), 2, uintptr(img), uintptr(unsafe.Pointer(g)), 0)
	status = GpStatus(r0)
	return
}

func GdipDrawImageI(g GpGraphics, img GpImage, x int, y int) (status GpStatus) {
	r0, _, _ := syscall.Syscall6(procGdipDrawImageI.Addr(), 4, uintptr(g), uintptr(img), uintptr(x), uintptr(y), 0, 0)
	status = GpStatus(r0)
	return
}

func GdipDrawImageRectI(g GpGraphics, img GpImage, x int, y int, w int, h int) (status GpStatus) {
	r0, _, _ := syscall.Syscall6(procGdipDrawImageRectI.Addr(), 6, uintptr(g), uintptr(img), uintptr(x), uintptr(y), uintptr(w), uintptr(h))
	status = GpStatus(r0)
	return
}

func GdipDrawImageRectRectI(g GpGraphics, img GpImage, dx int, dy int, dw int, dh int, sx int, sy int, sw int, sh int, unit GpUnit, ia GpImageAttributes, callback GpDrawImageAbort, cbdata unsafe.Pointer) (status GpStatus) {
	r0, _, _ := syscall.Syscall15(procGdipDrawImageRectRectI.Addr(), 14, uintptr(g), uintptr(img), uintptr(dx), uintptr(dy), uintptr(dw), uintptr(dh), uintptr(sx), uintptr(sy), uintptr(sw), uintptr(sh), uintptr(unit), uintptr(ia), uintptr(callback), uintptr(cbdata), 0)
	status = GpStatus(r0)
	return
}

func GdipCreateSolidFill(col GpARGB, br *GpBrush) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipCreateSolidFill.Addr(), 2, uintptr(col), uintptr(unsafe.Pointer(br)), 0)
	status = GpStatus(r0)
	return
}

func GdipSetSolidFillColor(br GpBrush, col GpARGB) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipSetSolidFillColor.Addr(), 2, uintptr(br), uintptr(col), 0)
	status = GpStatus(r0)
	return
}

func GdipDeleteBrush(br GpBrush) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipDeleteBrush.Addr(), 1, uintptr(br), 0, 0)
	status = GpStatus(r0)
	return
}

func GdipFillRectangleI(g GpGraphics, br GpBrush, x int, y int, width int, height int) (status GpStatus) {
	r0, _, _ := syscall.Syscall6(procGdipFillRectangleI.Addr(), 6, uintptr(g), uintptr(br), uintptr(x), uintptr(y), uintptr(width), uintptr(height))
	status = GpStatus(r0)
	return
}

func GdipFillPieI(g GpGraphics, br GpBrush, x int, y int, width int, height int, startAngle float32, sweepAngle float32) (status GpStatus) {
	r0, _, _ := syscall.Syscall9(procGdipFillPieI.Addr(), 8, uintptr(g), uintptr(br), uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(math.Float32bits(startAngle)), uintptr(math.Float32bits(sweepAngle)), 0)
	status = GpStatus(r0)
	return
}

func GdipFillEllipseI(g GpGraphics, br GpBrush, x int, y int, width int, height int) (status GpStatus) {
	r0, _, _ := syscall.Syscall6(procGdipFillEllipseI.Addr(), 6, uintptr(g), uintptr(br), uintptr(x), uintptr(y), uintptr(width), uintptr(height))
	status = GpStatus(r0)
	return
}

func GdipFillPolygonI(g GpGraphics, br GpBrush, points *GpPoint, plen int, m GpFillMode) (status GpStatus) {
	r0, _, _ := syscall.Syscall6(procGdipFillPolygonI.Addr(), 5, uintptr(g), uintptr(br), uintptr(unsafe.Pointer(points)), uintptr(plen), uintptr(m), 0)
	status = GpStatus(r0)
	return
}

func GdipCreatePen1(argb GpARGB, width float32, unit GpUnit, pen *GpPen) (status GpStatus) {
	r0, _, _ := syscall.Syscall6(procGdipCreatePen1.Addr(), 4, uintptr(argb), uintptr(math.Float32bits(width)), uintptr(unit), uintptr(unsafe.Pointer(pen)), 0, 0)
	status = GpStatus(r0)
	return
}

func GdipDeletePen(pen GpPen) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipDeletePen.Addr(), 1, uintptr(pen), 0, 0)
	status = GpStatus(r0)
	return
}

func GdipSetPenWidth(pen GpPen, width float32) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipSetPenWidth.Addr(), 2, uintptr(pen), uintptr(math.Float32bits(width)), 0)
	status = GpStatus(r0)
	return
}

func GdipSetPenColor(pen GpPen, argb GpARGB) (status GpStatus) {
	r0, _, _ := syscall.Syscall(procGdipSetPenColor.Addr(), 2, uintptr(pen), uintptr(argb), 0)
	status = GpStatus(r0)
	return
}

func GdipDrawLineI(g GpGraphics, pen GpPen, x1 int, y1 int, x2 int, y2 int) (status GpStatus) {
	r0, _, _ := syscall.Syscall6(procGdipDrawLineI.Addr(), 6, uintptr(g), uintptr(pen), uintptr(x1), uintptr(y1), uintptr(x2), uintptr(y2))
	status = GpStatus(r0)
	return
}

func GdipDrawRectangleI(g GpGraphics, pen GpPen, x int, y int, width int, height int) (status GpStatus) {
	r0, _, _ := syscall.Syscall6(procGdipDrawRectangleI.Addr(), 6, uintptr(g), uintptr(pen), uintptr(x), uintptr(y), uintptr(width), uintptr(height))
	status = GpStatus(r0)
	return
}

func GdipDrawArcI(g GpGraphics, pen GpPen, x int, y int, width int, height int, startAngle float32, sweepAngle float32) (status GpStatus) {
	r0, _, _ := syscall.Syscall9(procGdipDrawArcI.Addr(), 8, uintptr(g), uintptr(pen), uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(math.Float32bits(startAngle)), uintptr(math.Float32bits(sweepAngle)), 0)
	status = GpStatus(r0)
	return
}

func GdipDrawEllipseI(g GpGraphics, pen GpPen, x int, y int, width int, height int) (status GpStatus) {
	r0, _, _ := syscall.Syscall6(procGdipDrawEllipseI.Addr(), 6, uintptr(g), uintptr(pen), uintptr(x), uintptr(y), uintptr(width), uintptr(height))
	status = GpStatus(r0)
	return
}

func GdipDrawPolygonI(g GpGraphics, pen GpPen, points *GpPoint, plen int) (status GpStatus) {
	r0, _, _ := syscall.Syscall6(procGdipDrawPolygonI.Addr(), 4, uintptr(g), uintptr(pen), uintptr(unsafe.Pointer(points)), uintptr(plen), 0, 0)
	status = GpStatus(r0)
	return
}

func GdipDrawBezierI(g GpGraphics, pen GpPen, x1 int, y1 int, x2 int, y2 int, x3 int, y3 int, x4 int, y4 int) (status GpStatus) {
	r0, _, _ := syscall.Syscall12(procGdipDrawBezierI.Addr(), 10, uintptr(g), uintptr(pen), uintptr(x1), uintptr(y1), uintptr(x2), uintptr(y2), uintptr(x3), uintptr(y3), uintptr(x4), uintptr(y4), 0, 0)
	status = GpStatus(r0)
	return
}
